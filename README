Google Snappy, available at http://code.google.com/p/snappy/
is a compression library designed for speed rather than compression ratios.

It is not a new concept by far. The Linux kernel currently uses LZO as the
 default fast compressor. Snappy works faster, though achieves less compression.

Snappy was written at Google some time in 2005 under the name Zippy and
 eventually released as an open source project in 2011 under a new name and the
 Apache 2 license. This license is incompatible with GPL v2 and after being
 asked nicely by a representative of Mozilla Google have changed the license to
 BSD.

Google's code is written in C with a lot of C++. Some of the more interesting
 features that rely on C++ appear to have been elided from the open source
 version of Snappy.

My stated goal is to get the codebase into a shape that can be accepted into the
 mainline Linux kernel and used with zram (http://code.google.com/p/compcache/).
Being able to compress vmlinux and initrd with Snappy is a secondary goal.
Same for support in Squashfs and other parts of the kernel that currently
 support LZO.

To this end I cut out or port to plain ANSI C the necessary code and headers.
To cause less confusion, I call this project (and files) csnappy.
The work is not yet complete.
The API is not finalized.
The code *has* been tested in kernel-space using a patched zram and it works.
The code has AFAIK never been tested on any architecture other than x86-64.
The userspace testers are a hack, as is the shared library.

Someone wrote a perl wrapper for csnappy:
http://search.cpan.org/dist/Compress-Snappy/
https://github.com/gray/compress-snappy

Patch for upstream snappy tester is available.
Patch for linux kernel (2.6.38.2) is available.

Benchmark (zramtest2.sh) creates a zram block device, an ext4 filesystem on it,
 fixes the filesystem not to think it's on a striped RAID device with a single
 stripe, and then untars a gzip'd tarball to that filesystem.

Results for LZO zram:
real	0m5.337s
user	0m4.211s
sys	0m1.474s
orig_data_size	645939200
compr_data_size	320630219
mem_used_total	326209536

Result for Snappy zram:
real	0m4.864s
user	0m4.205s
sys	0m1.462s
orig_data_size	645476352
compr_data_size	325877856
mem_used_total	331575296

orig_data_size is not constant from run to run. I don't know why.

perf for the LZO zram:
# Events: 121K cycles
#
# Overhead  Samples          Command               Shared Object                                  Symbol
# ........ ..........  .............  ..........................  ......................................
#
    37.14%      43419    flush-253:0  [lzo_compress]              [k] _lzo1x_1_do_compress
    15.74%      18432           gzip  gzip                        [.] zip
    14.72%      17338           gzip  gzip                        [.] treat_file.part.4.2264
     2.30%       2696           gzip  libc-2.13.so                [.] __memcpy_ssse3
     1.68%       2903            tar  [kernel.kallsyms]           [k] copy_user_generic_string
     1.22%       1428           gzip  [kernel.kallsyms]           [k] copy_user_generic_string
     0.90%       1055    flush-253:0  [kernel.kallsyms]           [k] __memcpy
     0.64%        747    flush-253:0  [lzo_compress]              [k] lzo1x_1_compress
     0.54%        626           gzip  gzip                        [.] treat_stdin.2262
     0.54%        745            tar  [kernel.kallsyms]           [k] ext4_mark_iloc_dirty
     0.46%        692            tar  [kernel.kallsyms]           [k] __memset
     0.42%        489           gzip  gzip                        [.] treat_file.2267
     0.28%        331             dd  [kernel.kallsyms]           [k] system_call
     0.28%        329             dd  [kernel.kallsyms]           [k] copy_user_generic_string
     0.28%        382            tar  [kernel.kallsyms]           [k] _raw_spin_lock
     0.27%        322    flush-253:0  [kernel.kallsyms]           [k] mb_find_order_for_block
     0.26%        355            tar  [kernel.kallsyms]           [k] __find_get_block
     0.26%        299    flush-253:0  [kernel.kallsyms]           [k] _raw_spin_lock
     0.23%        275           gzip  gzip                        [.] compress_block.2644.2190
     0.22%        258    flush-253:0  [kernel.kallsyms]           [k] __memset
     0.22%        304            tar  [kernel.kallsyms]           [k] __ext4_get_inode_loc
     0.20%        344            tar  [kernel.kallsyms]           [k] mark_page_accessed

perf for Snappy zram:
# Events: 97K cycles
#
# Overhead  Samples          Command                Shared Object                                               Symbol
# ........ ..........  .............  ...........................  ...................................................
#
    21.29%      18655           gzip  gzip                         [.] zip
    20.11%      17737           gzip  gzip                         [.] treat_file.part.4.2264
    15.53%      13663    flush-253:0  [csnappy_compress]           [k] snappy_compress_fragment
     3.20%       2811           gzip  libc-2.13.so                 [.] __memcpy_ssse3
     2.79%       2461    flush-253:0  [kernel.kallsyms]            [k] __memcpy
     2.24%       3675            tar  [kernel.kallsyms]            [k] copy_user_generic_string
     1.80%       1584           gzip  [kernel.kallsyms]            [k] copy_user_generic_string
     1.22%       1078    flush-253:0  [kernel.kallsyms]            [k] __memset
     0.73%        635           gzip  gzip                         [.] treat_stdin.2262
     0.68%        923            tar  [kernel.kallsyms]            [k] ext4_mark_iloc_dirty
     0.66%        892            tar  [kernel.kallsyms]            [k] __memset
     0.56%        485           gzip  gzip                         [.] treat_file.2267
     0.41%        360             dd  [kernel.kallsyms]            [k] system_call
     0.39%        499            tar  [kernel.kallsyms]            [k] _raw_spin_lock
     0.39%        343    flush-253:0  [kernel.kallsyms]            [k] mb_find_order_for_block
     0.36%        459            tar  [kernel.kallsyms]            [k] __find_get_block
     0.35%        303             dd  [kernel.kallsyms]            [k] copy_user_generic_string
     0.32%        287    flush-253:0  [kernel.kallsyms]            [k] _raw_spin_lock
     0.30%        387            tar  [kernel.kallsyms]            [k] __ext4_get_inode_loc
     0.29%        257           gzip  gzip                         [.] compress_block.2644.2190
     0.27%        431            tar  [kernel.kallsyms]            [k] mark_page_accessed
     0.25%        288            tar  tar                          [.] contains_dot_dot
     0.24%        215           gzip  gzip                         [.] memcpy@plt
     0.24%        211    flush-253:0  [kernel.kallsyms]            [k] __lookup_tag
     0.23%        320            tar  [kernel.kallsyms]            [k] kmem_cache_alloc
     0.22%        276            tar  [kernel.kallsyms]            [k] system_call
     0.22%        194    flush-253:0  [zram]                       [k] zram_make_request
     0.21%        185    flush-253:0  [kernel.kallsyms]            [k] mb_find_extent.constprop.49
