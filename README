Google Snappy, available at http://code.google.com/p/snappy/
is a compression library designed for speed rather than compression ratios.

It is not a new concept by far. The Linux kernel currently uses LZO as the
 default fast compressor. Snappy works faster, though achieves less compression.

Snappy was written at Google some time in 2005 under the name Zippy and
 eventually released as an open source project in 2011 under a new name and the
 Apache 2 license. This license is incompatible with GPL v2 and after being
 asked nicely by a representative of Mozilla Google have changed the license to
 BSD.

Google's code is written in C with a lot of C++. Some of the more interesting
 features that rely on C++ appear to have been elided from the open source
 version of Snappy.

My stated goal is to get the codebase into a shape that can be accepted into the
 mainline Linux kernel and used with zram (http://code.google.com/p/compcache/).
Being able to compress vmlinux and initrd with Snappy is a secondary goal.
Same for support in Squashfs and other parts of the kernel that currently
 support LZO.

To this end I cut out or port to plain ANSI C the necessary code and headers.
To cause less confusion, I call this project (and files) csnappy.
The work is not yet complete.
The API is not finalized.
The code *has* been tested in kernel-space using a patched zram and it works.
The code has AFAIK never been tested on any architecture other than x86-64.
The userspace testers are a hack, as is the shared library.

Someone wrote a perl wrapper for csnappy:
http://search.cpan.org/dist/Compress-Snappy/
https://github.com/gray/compress-snappy

Patch for upstream snappy tester is available.
Patch for linux kernel (2.6.38.2) is available.

Benchmark (zramtest2.sh) creates a zram block device, an ext4 filesystem on it,
 fixes the filesystem not to think it's on a striped RAID device with a single
 stripe, and then untars a gzip'd tarball to that filesystem.
Then it syncs the filesystem, drops caches and verifies md5 checksums of
 extracted files to cause them to be read back from zram.

Results for LZO zram:
real	0m7.369s
user	0m4.197s
sys	0m1.459s
orig_data_size	645906432
compr_data_size	320629512
mem_used_total	326131712

Result for Snappy zram:
real	0m5.877s
user	0m4.209s
sys	0m1.455s
orig_data_size	645918720
compr_data_size	326060830
mem_used_total	331780096

orig_data_size is not constant from run to run. I don't know why.

perf for the LZO zram:
# Events: 16K cycles
#
# Overhead         Command            Shared Object                                  Symbol
# ........  ..............  .......................  ......................................
#
    24.89%     flush-253:0  [lzo_compress]           [k] _lzo1x_1_do_compress
    12.55%            gzip  gzip                     [.] zip
    12.13%            gzip  gzip                     [.] treat_file.part.4.2264
     7.88%          md5sum  [lzo_decompress]         [k] lzo1x_decompress_safe
     5.38%          md5sum  md5sum                   [.] digest_file.isra.2.2089
     3.79%          md5sum  md5sum                   [.] 0x3224          
     1.89%            gzip  libc-2.13.so             [.] __memcpy_ssse3
     1.28%             tar  [kernel.kallsyms]        [k] copy_user_generic_string
     1.10%            gzip  [kernel.kallsyms]        [k] copy_user_generic_string
     0.74%     flush-253:0  [kernel.kallsyms]        [k] memcpy
     0.65%          md5sum  md5sum                   [.] __libc_csu_init
     0.60%          md5sum  [zram]                   [k] zram_make_request
     0.48%     flush-253:0  [lzo_compress]           [k] lzo1x_1_compress
     0.47%          md5sum  [kernel.kallsyms]        [k] copy_user_generic_string
     0.44%            gzip  gzip                     [.] treat_stdin.2262
     0.43%             tar  [kernel.kallsyms]        [k] ext4_mark_iloc_dirty
     0.34%             tar  [kernel.kallsyms]        [k] __memset
     0.34%            gzip  gzip                     [.] treat_file.2267
     0.30%              dd  [kernel.kallsyms]        [k] system_call
     0.29%         swapper  [kernel.kallsyms]        [k] mwait_idle
     0.23%             tar  [kernel.kallsyms]        [k] __ext4_get_inode_loc
     0.22%             tar  [kernel.kallsyms]        [k] __find_get_block
     0.22%              dd  [kernel.kallsyms]        [k] copy_user_generic_string
     0.21%     flush-253:0  [kernel.kallsyms]        [k] __memset
     0.21%             tar  [kernel.kallsyms]        [k] _raw_spin_lock

perf for Snappy zram:
# Events: 13K cycles
#
# Overhead      Command          Shared Object                                 Symbol
# ........  ...........  .....................  .....................................
#
    15.82%         gzip  gzip                   [.] zip
    14.43%         gzip  gzip                   [.] treat_file.part.4.2264
    11.11%  flush-253:0  [csnappy_compress]     [k] snappy_compress_fragment
     6.22%       md5sum  md5sum                 [.] digest_file.isra.2.2089
     5.46%       md5sum  [csnappy_decompress]   [k] snappy_decompress_noheader
     5.12%       md5sum  md5sum                 [.] 0x338f          
     2.34%         gzip  libc-2.13.so           [.] __memcpy_ssse3
     1.97%  flush-253:0  [kernel.kallsyms]      [k] memcpy
     1.54%          tar  [kernel.kallsyms]      [k] copy_user_generic_string
     1.14%         gzip  [kernel.kallsyms]      [k] copy_user_generic_string
     0.76%  flush-253:0  [kernel.kallsyms]      [k] __memset
     0.73%       md5sum  [zram]                 [k] zram_make_request
     0.72%       md5sum  md5sum                 [.] __libc_csu_init
     0.51%          tar  [kernel.kallsyms]      [k] ext4_mark_iloc_dirty
     0.51%       md5sum  [kernel.kallsyms]      [k] copy_user_generic_string
     0.50%          tar  [kernel.kallsyms]      [k] __memset
     0.49%         gzip  gzip                   [.] treat_file.2267
     0.47%       md5sum  [kernel.kallsyms]      [k] memcpy
     0.44%         gzip  gzip                   [.] treat_stdin.2262
     0.35%           dd  [kernel.kallsyms]      [k] system_call
     0.27%      swapper  [kernel.kallsyms]      [k] mwait_idle
     0.26%          tar  [kernel.kallsyms]      [k] mark_page_accessed
     0.26%  flush-253:0  [kernel.kallsyms]      [k] mb_find_order_for_block
     0.25%  flush-253:0  [kernel.kallsyms]      [k] _raw_spin_lock
     0.24%          tar  [kernel.kallsyms]      [k] __ext4_get_inode_loc
     0.24%          tar  [kernel.kallsyms]      [k] _raw_spin_lock
     0.24%          tar  [kernel.kallsyms]      [k] __find_get_block
     0.22%           dd  [kernel.kallsyms]      [k] copy_user_generic_string
     0.20%          tar  tar                    [.] contains_dot_dot
